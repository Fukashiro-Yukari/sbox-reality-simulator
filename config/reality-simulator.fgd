
@BaseClass = BaseProperties_reality_simulator
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// BouncyBallEntity
//
@PointClass base(BaseProperties_reality_simulator) tags( Physics ) model() = ent_bouncyball : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// AK47
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/swb/css/ak47/css_w_rif_ak47.vmdl" ) = weapon_ak47 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// AUG
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_ang/w_css_rif_aug.vmdl" ) = weapon_aug : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// AWP
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_awp/css_w_awp.vmdl" ) = weapon_awp : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Crossbow
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/rust_crossbow/rust_crossbow.vmdl" ) = weapon_crossbow : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Deagle
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_deagle/css_w_pist_deagle.vmdl" ) = weapon_deagle : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Elites
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_elite/w_css_pist_elite_dropped.vmdl" ) = weapon_elite : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// FAMAS
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_famas/w_css_rif_famas.vmdl" ) = weapon_famas : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Fists
//
@PointClass base(BaseProperties_reality_simulator) = weapon_fists : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// FiveSeven
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_fiveseven/w_css_pist_fiveseven.vmdl" ) = weapon_fiveseven : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Flashlight
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/rust_pistol/rust_pistol.vmdl" ) = weapon_flashlight : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// G3SG1
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_g3sg1/w_css_snip_g3sg1.vmdl" ) = weapon_g3sg1 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// GALIL
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_galil/w_css_rif_galil.vmdl" ) = weapon_galil : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Glock18
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_glock18/w_css_pist_glock18.vmdl" ) = weapon_glock : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// HL2Pistol
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/hl2_pistol/w_hl2_pistol.vmdl" ) = weapon_hl2_pistol : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Knife
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_knife/css_w_knife.vmdl" ) = weapon_knife : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// M249
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_m249/css_w_mach_m249para.vmdl" ) = weapon_m249 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// M3
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_super90/css_w_shot_m3super90.vmdl" ) = weapon_m3 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// M4A1
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_m4a1/css_w_m4a1.vmdl" ) = weapon_m4a1 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// MAC10
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/swb/css/mac10/css_w_sweapon_mac10.vmdl" ) = weapon_mac10 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// MP5
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_mp5/w_css_sweapon_mp5.vmdl" ) = weapon_mp5navy : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// P228
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_p228/w_css_pist_p228.vmdl" ) = weapon_p228 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// P90
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_p90/w_css_sweapon_p90.vmdl" ) = weapon_p90 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Pistol
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/rust_pistol/rust_pistol.vmdl" ) = weapon_pistol : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// PumpShotgun
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/rust_pumpshotgun/rust_pumpshotgun.vmdl" ) = weapon_pumpshotgun : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Python357
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "models/weapons/w_357.vmdl" ) = weapon_357 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// RPG
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/swb/explosives/rpg-7/swb_w_rpg7.vmdl" ) = weapon_rpg : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Scout
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_scout/w_css_snip_scout.vmdl" ) = weapon_scout : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// SG550
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_sg550/w_css_snip_sg550.vmdl" ) = weapon_sg550 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// SG552
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_sg552/w_css_rif_sg552.vmdl" ) = weapon_sg552 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// SMG
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/rust_smg/rust_smg.vmdl" ) = weapon_smg : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TMP
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_tmp/w_css_sweapon_tmp.vmdl" ) = weapon_tmp : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// UMP45
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_ump45/w_css_sweapon_ump45.vmdl" ) = weapon_ump45 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// USP
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_usp/w_css_pist_usp.vmdl" ) = weapon_usp : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// XM1014
//
@PointClass base(BaseProperties_reality_simulator) editormodel( "weapons/css_xm1014/w_css_shot_xm1014.vmdl" ) = weapon_xm1014 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// CarEntity
//
@PointClass base(BaseProperties_reality_simulator) tags( Physics ) model() = ent_car : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

